{"ast":null,"code":"const checkInViewIntersectionObserver = _ref => {\n  let {\n    target,\n    options = {\n      root: null,\n      rootMargin: `0%`,\n      threshold: 0\n    },\n    callback,\n    freezeOnceVisible = false\n  } = _ref;\n  const _funCallback = (entries, observer) => {\n    entries.map(entry => {\n      if (entry.isIntersecting) {\n        //\n        callback();\n        //  ---- IF TRUE WE WILL UNOBSERVER AND FALSE IS NO\n        if (freezeOnceVisible) {\n          observer.unobserve(entry.target);\n        }\n      }\n      return true;\n    });\n  };\n\n  // _checkBrowserSupport-----\n  if (typeof window.IntersectionObserver === \"undefined\") {\n    console.error(\"window.IntersectionObserver === undefined! => Your Browser is Notsupport\");\n    return;\n  }\n  const observer = new IntersectionObserver(_funCallback, options);\n  target && observer.observe(target);\n};\nexport default checkInViewIntersectionObserver;","map":{"version":3,"names":["checkInViewIntersectionObserver","target","options","root","rootMargin","threshold","callback","freezeOnceVisible","_funCallback","entries","observer","map","entry","isIntersecting","unobserve","window","IntersectionObserver","console","error","observe"],"sources":["/Users/trey/Downloads/Ciseco/Ciseco/src/utils/isInViewPortIntersectionObserver.ts"],"sourcesContent":["export interface InviewPortType {\r\n  callback: () => void;\r\n  target: HTMLElement;\r\n  options: IntersectionObserverInit | undefined;\r\n  freezeOnceVisible: boolean;\r\n}\r\n\r\nconst checkInViewIntersectionObserver = ({\r\n  target,\r\n  options = { root: null, rootMargin: `0%`, threshold: 0 },\r\n  callback,\r\n  freezeOnceVisible = false,\r\n}: InviewPortType) => {\r\n  const _funCallback: IntersectionObserverCallback = (\r\n    entries: IntersectionObserverEntry[],\r\n    observer: IntersectionObserver\r\n  ) => {\r\n    entries.map((entry: IntersectionObserverEntry) => {\r\n      if (entry.isIntersecting) {\r\n        //\r\n        callback();\r\n        //  ---- IF TRUE WE WILL UNOBSERVER AND FALSE IS NO\r\n        if (freezeOnceVisible) {\r\n          observer.unobserve(entry.target);\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n  };\r\n\r\n  // _checkBrowserSupport-----\r\n  if (typeof window.IntersectionObserver === \"undefined\") {\r\n    console.error(\r\n      \"window.IntersectionObserver === undefined! => Your Browser is Notsupport\"\r\n    );\r\n    return;\r\n  }\r\n\r\n  const observer = new IntersectionObserver(_funCallback, options);\r\n  target && observer.observe(target);\r\n};\r\n\r\nexport default checkInViewIntersectionObserver;\r\n"],"mappings":"AAOA,MAAMA,+BAA+B,GAAG,QAKlB;EAAA,IALmB;IACvCC,MAAM;IACNC,OAAO,GAAG;MAAEC,IAAI,EAAE,IAAI;MAAEC,UAAU,EAAG,IAAG;MAAEC,SAAS,EAAE;IAAE,CAAC;IACxDC,QAAQ;IACRC,iBAAiB,GAAG;EACN,CAAC;EACf,MAAMC,YAA0C,GAAG,CACjDC,OAAoC,EACpCC,QAA8B,KAC3B;IACHD,OAAO,CAACE,GAAG,CAAEC,KAAgC,IAAK;MAChD,IAAIA,KAAK,CAACC,cAAc,EAAE;QACxB;QACAP,QAAQ,EAAE;QACV;QACA,IAAIC,iBAAiB,EAAE;UACrBG,QAAQ,CAACI,SAAS,CAACF,KAAK,CAACX,MAAM,CAAC;QAClC;MACF;MACA,OAAO,IAAI;IACb,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,IAAI,OAAOc,MAAM,CAACC,oBAAoB,KAAK,WAAW,EAAE;IACtDC,OAAO,CAACC,KAAK,CACX,0EAA0E,CAC3E;IACD;EACF;EAEA,MAAMR,QAAQ,GAAG,IAAIM,oBAAoB,CAACR,YAAY,EAAEN,OAAO,CAAC;EAChED,MAAM,IAAIS,QAAQ,CAACS,OAAO,CAAClB,MAAM,CAAC;AACpC,CAAC;AAED,eAAeD,+BAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}